name: Build and publish native-images

on:
  workflow_dispatch:
  push:
    tags:
      - "*"

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        architecture: [x86_64, aarch64]
        include:
          - os: ubuntu-latest
            architecture: x86_64
          - os: macos-latest
            architecture: x86_64
          - os: macos-latest
            architecture: aarch64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache dependencies
        uses: coursier/cache-action@v6

      - name: Install Scala CLI
        uses: VirtusLab/scala-cli-setup@main
        with:
          jvm: liberica-nik:23.0.1
          apps: cs
          scala-cli-version: latest

      - name: Print JVM info
        run: java -version | echo "$JAVA_HOME" 

      - name: Check Liberica NIK installation
        run: |
          java -version 2>&1 | grep "24.0.2.r22-nik" > /dev/null || {
            echo "Liberica-NIK 24.0.2.r22-nik not installed. Exiting.";
            exit 1;
          }

      - name: Clean native-image configuration
        run: rm -fr resources/META-INF/native-image

      - name: Generate native-image configuration by running tests
        run: |
          scala-cli test . \
            -J -agentlib:native-image-agent=config-output-dir=$(pwd)/resources/META-INF/native-image

      - name: Enrich configuration by running the app
        run: |
          echo 'implementation("org.openjfx:javafx:22.0.2")' | \
            scala-cli run . \
            -J -agentlib:native-image-agent=config-merge-dir=$(pwd)/resources/META-INF/native-image

      - name: Build GraalVM native-image
        run: |
          scala-cli package -f . \
            --native-image \
            --graalvm-jvm-id=liberica-nik:23.0.1 \
            --graalvm-args=-Djava.awt.headless=false \
            --graalvm-args=--no-fallback \
            --graalvm-args=--install-exit-handlers \
            -o dep

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: dep-${{ matrix.os }}-${{ matrix.architecture }}-${{ github.ref_name }}
          path: dep